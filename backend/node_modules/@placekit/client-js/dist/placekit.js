/*! @placekit/client-js v2.3.0 | Â© placekit.io | MIT license | https://github.com/placekit/client-js#readme */
import placekit from './placekit-lite.js';

placekit.extend('patch', (request) => ({
  list(opts = {}) {
    if (!['object', 'undefined'].includes(typeof opts) || Array.isArray(opts) || opts === null) {
      throw Error('PlaceKit.patch.list: `opts` argument is invalid, expected an object.');
    }
    return request('POST', `patch/search`, opts);
  },
  create(update, opts = {}, origin) {
    if (!['object', 'undefined'].includes(typeof opts) || Array.isArray(opts) || opts === null) {
      throw Error('PlaceKit.patch.create: `opts` argument is invalid, expected an object.');
    }
    const method = typeof origin === 'undefined' ? 'POST' : 'PUT';
    const data =
      typeof origin === 'undefined'
        ? { record: update }
        : {
            origin,
            update,
          };
    return request(method, 'patch', {
      ...data,
      status: opts?.status,
      language: opts?.language,
    });
  },
  get(id, language) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.patch.get: `id` argument is invalid, expected a string.');
    }
    if (!['string', 'undefined'].includes(typeof language)) {
      throw Error('PlaceKit.patch.get: `language` argument is invalid, expected a string.');
    }
    return request('GET', `patch/${id}`, {
      language,
    });
  },
  update(id, update, opts = {}) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.patch.update: `id` argument is invalid, expected a string.');
    }
    if (!['object', 'undefined'].includes(typeof opts) || Array.isArray(opts) || opts === null) {
      throw Error('PlaceKit.patch.update: `opts` argument is invalid, expected an object.');
    }
    return request('PATCH', `patch/${id}`, {
      update,
      status: opts?.status,
      language: opts?.language,
    });
  },
  delete(id) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.patch.delete: `id` argument is invalid, expected a string.');
    }
    return request('DELETE', `patch/${id}`);
  },
  deleteLang(id, language) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.patch.deleteLang: `id` argument is invalid, expected a string.');
    }
    if (typeof language !== 'string' || !language) {
      throw Error('PlaceKit.patch.deleteLang: `language` argument is invalid, expected a string.');
    }
    return request('DELETE', `patch/${id}/language/${language}`);
  },
}));
placekit.extend('keys', (request) => ({
  list() {
    return request('GET', `keys`);
  },
  create(role, opts = {}) {
    if (!['public', 'private'].includes(role)) {
      throw Error(
        'PlaceKit.keys.create: `role` argument is invalid, expected either "public" or "private".',
      );
    }
    if (!['object', 'undefined'].includes(typeof opts) || Array.isArray(opts) || opts === null) {
      throw Error('PlaceKit.patch.update: `opts` argument is invalid, expected an object.');
    }
    return request('POST', `keys`, {
      role,
      domains: opts.domains,
    });
  },
  get(id) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.keys.get: `id` argument is invalid, expected a string.');
    }
    return request('GET', `keys/${id}`);
  },
  update(id, opts = {}) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.keys.get: `id` argument is invalid, expected a string.');
    }
    if (!['object', 'undefined'].includes(typeof opts) || Array.isArray(opts) || opts === null) {
      throw Error('PlaceKit.patch.update: `opts` argument is invalid, expected an object.');
    }
    return request('PATCH', `keys/${id}`, {
      domains: opts.domains,
    });
  },
  delete(id) {
    if (typeof id !== 'string' || !id) {
      throw Error('PlaceKit.keys.get: `id` argument is invalid, expected a string.');
    }
    return request('DELETE', `keys/${id}`);
  },
}));

export { placekit as default };
